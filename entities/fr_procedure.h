#include "fragment.h"
#ifndef SCHC_OVER_SIGFOX_C_FR_PROCEDURE_H
#define SCHC_OVER_SIGFOX_C_FR_PROCEDURE_H

#endif // SCHC_OVER_SIGFOX_C_FR_PROCEDURE_H

/*
 * Function:  get_number_of_fragments
 * --------------------
 * Obtains the number of fragments that would be generated by performing
 * the fragmentation procedure of SCHC over a SCHC Packet of certain size.
 *
 *  rule: the Rule struct used to make the calculation.
 *  byte_size: size in bytes of the SCHC Packet.
 */
int get_number_of_fragments(Rule *rule, int byte_size);

/*
 * Function:  fragment
 * --------------------
 * Performs the SCHC fragmentation procedure and stores the resulting Fragments
 * in an array. Returns -1 on errors.
 *
 *  rule: the Rule struct used to perform the fragmentation.
 *  schc_packet: the SCHC Packet to be fragmented.
 *  byte_size: size in bytes of the SCHC Packet.
 */
int fragment(Rule *rule, Fragment dest[],
             const char schc_packet[], int byte_size);

/*
 * Function:  get_packet_length_from_array
 * --------------------
 * Given a null-Fragment-terminated Fragment array, obtains the size of
 * the SCHC Packet that the array will reassemble into.
 *
 *  rule: the Rule struct used to perform the procedure.
 *  fragments: null-Fragment-terminated Fragment array.
 */
int get_packet_length_from_array(Rule *rule, Fragment *fragments);

/*
 * Function:  reassemble
 * --------------------
 * Given a null-Fragment-terminated Fragment array, reassembles all Fragments
 * into the SCHC Packet they represent. Returns -1 on errors.
 *
 *  rule: the Rule struct used to perform the procedure.
 *  dest: buffer where to store the result. Its size must match the size of the
 *  SCHC Packet, and is obtained by get_packet_length_from_array().
 *  fragments: null-Fragment-terminated Fragment array.
 */
int reassemble(Rule *rule, char dest[], Fragment fragments[]);